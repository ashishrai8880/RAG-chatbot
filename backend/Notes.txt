============================== Steps in our project ===================================
/**
 * Implementation plan
 * Stage 1: Indexting
 * 1. Load the document - pdf, text - completed
 * 2. Chunk the document - completed
 * 3. Generate vector embeddings - completed

 *
 * Stage 2: Using the chatbot
 * 1. Setup LLM 
 * 2. Add retrieval step
 * 3. Pass input + relevant information to LLM
 * 4. Congratulations
 */


1. What is RAG ?   
GFG : https://www.geeksforgeeks.org/nlp/what-is-retrieval-augmented-generation-rag/
  Ans : Retrieval Augmentation Generation . 

Retrieval-augmented generation (RAG) is an innovative approach in the field of natural language processing (NLP) that combines the strengths of retrieval-based and generation-based models to enhance the quality
  of generated text.
  It is a technique where a Model first retrieves relevant information from a knowledge source , then uses that information to generate an answer .

Why is Retrieval-Augmented Generation important?
In traditional LLMs, the model generates responses based solely on the data it was trained on, which may not include the most current information or specific details required for certain tasks. RAG addresses this limitation by incorporating a retrieval mechanism that allows the model to access external databases or documents in real-time.

This hybrid model aims to leverage the vast amounts of information available in large-scale databases or knowledge bases making it particularly effective for tasks that require accurate and contextually relevant information.

===============> STEPS INVOLVED <==========================
1. Creating External Data

External data refers to new information beyond the LLM’s original training dataset. It can come from various sources, such as APIs, databases, or document repositories, and may exist in different formats like text files or structured records. To make this data understandable to AI, it is first divided in chunks in case of massive datasets and converted into numerical representations (embeddings) using specialized models and then stored in a vector database. This creates a knowledge library that the AI system can reference during retrieval.

2. Retrieving Relevant Information

When a user submits a query, the system converts it into a vector representation and matches it against stored vectors in the database. This enables precise retrieval of the most relevant information. For example, if the Y.O.G.I Botis asked, "What are the key topics in the DSA course?", it would retrieve both the course syllabus and relevant study materials. This ensures the response is highly relevant and tailored to the user's learning needs.

3. Augmenting the LLM Prompt

Once the relevant data is retrieved, it is incorporated into the user’s input (prompt) using prompt engineering techniques. This enhances the model’s contextual understanding, allowing it to generate more detailed, factually accurate, and insightful responses.

4. Keeping External Data Updated

To ensure the system continues to provide reliable and up-to-date responses, external data must be refreshed periodically. This can be done through automated real-time updates or scheduled batch processing. Keeping vector embeddings updated allows the RAG system to always retrieve the most current and relevant information for generating responses.


======================================================================== Vector Embeddings and Vector Database ======================================================================================
 Word embeddings are numerical representations of words that capture their meanings and relationships based on how they appear in a text corpus. These embeddings are generated by training a machine learning model on a large amount of text data. The model learns to assign each word a unique vector of numbers, which serves as its embedding.

Vector embeddings are numbers that represent the meaning of text/data so that similar meaning have similar numbers .
Vector Index : Special data structure to search .

Vector Database : A vector database is a specialized type of database designed to store and efficiently retrieve vector data. Unlike traditional databases that primarily handle structured data (e.g., tables with rows and columns), vector databases are optimized for managing and querying high-dimensional vector representations.













